Description: >
  NhanHDT1 - Udacity 2022
  AWS-CloudFormation: Webapp infrastructure

### Parameters ###
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: Udagram2022
  
  S3BucketName:
    Description: S3Bucket where placing udacity.html
    Type: String
    Default: udagram-bucket-app-1839260

Mappings:
  WebAppRegion:
    us-east-1:
      HVM64: ami-0e472ba40eb589f49

### Resources ###
Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LBSecGroup
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} LBSecGroup

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServerSecGroup
      GroupDescription: Allow http and SSH access
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WebServerSecGroup

  WebAppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to ec2 and SHH access from jumbox
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: !Sub ${EnvironmentName}-BASTION1-CIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: !Sub ${EnvironmentName}-BASTION2-CIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WASG

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install unzip awscli -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service           
          sudo rm /var/www/html/index.html
          sudo aws s3 cp s3://${S3BucketName}/index.html /var/www/html
          systemctl restart apache2.service
      IamInstanceProfile:
        Fn::ImportValue: !Sub '${EnvironmentName}-IAM-NAME'            
      SecurityGroups:
        - Ref: 'WebAppSG'
      BlockDeviceMappings:
        - DeviceName: '/dev/sdk'
          Ebs:
            VolumeSize: '10'
            DeleteOnTermination: true
            VolumeType: 'gp2'
      ImageId: !FindInMap [WebAppRegion, !Ref 'AWS::Region', HVM64]
      InstanceType: t3.small

  WebAppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 4
      MaxSize: 4
      DesiredCapacity: 4
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${EnvironmentName}-PRIV-NET1'
        - Fn::ImportValue: !Sub '${EnvironmentName}-PRIV-NET2'
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      TargetGroupARNs:
        - Ref: WebAppTG

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: udagram
      Subnets:
        - Fn::ImportValue: !Sub '${EnvironmentName}-PUB1-SN'
        - Fn::ImportValue: !Sub '${EnvironmentName}-PUB2-SN'
      SecurityGroups:
        - Ref: LBSecGroup

  WebAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTG
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP

  WebAppLR:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTG
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref WebAppListener
      Priority: 1

  WebAppTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: '${EnvironmentName}-VPCID'

  #CloudFront and WAF Protection
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt [WebAppLB, DNSName]
            Id: !GetAtt [WebAppLB, DNSName]
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
        Enabled: 'true'
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/error.html'
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/error.html'
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: 'false'
          Bucket:
            Fn::Join:
              - ''
              - - Fn::ImportValue: !Sub ${EnvironmentName}-S3-LOGS
        Restrictions:
          GeoRestriction:
            RestrictionType: none
            Locations: []
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, GET]
          MinTTL: '0'
          MaxTTL: '0'
          DefaultTTL: '0'
          TargetOriginId: !GetAtt [WebAppLB, DNSName]
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'true'
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
        
### Outputs ###
Outputs:
  Website:
    Description: The Public DNS for the EC2 Instance
    Value: !Join ['', ['http://', !GetAtt [WebAppLB, DNSName]]]

  WebAppASG:
    Description: 'Group ID of Auto Scaling Group Reference ID'
    Value: !Ref 'WebAppASG'